)
barplot(c(mean(n3),mean(c3)))
barplot(c(mean(n3),mean(c3)), names.arg = c("normal","cancer"))
xlab = "groups", ylab = "expression values (log 2)")
barplot(c(mean(n3),mean(c3)), names.arg = c("normal","cancer"),
xlab = "groups", ylab = "expression values (log 2)")
barplot(c(mean(n3),mean(c3)), names.arg = c("normal","cancer"),
xlab = "Groups", ylab = "Expression Values (log 2)")
barplot(c(mean(n3),mean(c3)), names.arg = c("normal","cancer"),
xlab = "Groups", ylab = "Expression Values (log 2)", width = c(0.5,0.5))
barplot(c(mean(n3),mean(c3)), names.arg = c("normal","cancer"),
xlab = "Groups", ylab = "Expression Values (log 2)"))
barplot(c(mean(n3),mean(c3)), names.arg = c("normal","cancer"),
xlab = "Groups", ylab = "Expression Values (log 2)")
?sem
which(genes=="CLU")
which(genes=="CLU")
n4 <- as.numeric(expr[4667,pheno$disease.state=="normal"])
c4 <- as.numeric(expr[4667,pheno$disease.state=="small cell lung cancer"])
barplot(c(mean(n4),mean(c4)), names.arg = c("normal","cancer"),
xlab = "Groups", ylab = "Expression Values (log 2)")
library(Biobase)
library(GEOquery)
library(perm)
load("D:/docs/courses/DGP484/prac2data.RData") # to get KEGG data
library(ggplot2)
gds4794 <- getGEO("GDS4794")
genes<- Table(gds4794)$IDENTIFIER
genes <- sapply(genes, as.character)
eset <- GDS2eSet(gds4794,do.log2 = TRUE)
pheno <- as.data.frame(pData(eset)) # phenotype data
expr <- as.data.frame(exprs(eset)) # expression values
nrow(expr) # rows of expr
sample(54675,2) # randomly chose two genes
n1 <- as.numeric(expr[29203,pheno$disease.state=="normal"])
c1 <- as.numeric(expr[29203,pheno$disease.state=="small cell lung cancer"])
qqnorm(n1,main = NULL)
qqnorm(c1,main = NULL)
n2 <- as.numeric(expr[4667,pheno$disease.state=="normal"])
c2 <- as.numeric(expr[4667,pheno$disease.state=="small cell lung cancer"])
qqnorm(n2, main = NULL)
qqnorm(c2, main = NULL)
data("iris")
data(iris)
?iris
View(iris)
colnames(iris)
table(iris$Species)
range(iris[,!iris$Species])
range(iris[,1:4])
range(iris[,1:5])
range(iris[,1:4])
range(iris$Sepal.Length)
range(iris$Sepal.Width)
range(iris$Petal.Length)
range(iris$Petal.Width)
pairs(iris)
pairs(iris[,1:4])
colnames(iris) # retrieve column names
table(iris$Species) # make a table based on Species
range(iris$Sepal.Length) # sepal length
range(iris$Sepal.Width)  # sepal width
range(iris$Petal.Length) # petal length
range(iris$Petal.Width)  # petal width
pairs(iris[,1:4]) # only include continuous variables
boxplot(iris$Sepal.Length~iris$Species)
which(iris$Species=="setosa")
mean(iris$Sepal.Length[which(iris$Species=="setosa"])
mean(iris$Sepal.Length[which(iris$Species=="setosa")])
mean(iris$Sepal.Length[which(iris$Species=="versicolor")]) # versicolor
mean(iris$Sepal.Length[which(iris$Species=="virginica")]) # virginica
sd(iris$Sepal.Length[which(iris$Species=="setosa")]) # setosa
sd(iris$Sepal.Length[which(iris$Species=="versicolor")]) # versicolor
sd(iris$Sepal.Length[which(iris$Species=="virginica")]) # virginica
mean(iris$Sepal.Length)
y1 <- mean(iris$Sepal.Length[which(iris$Species=="setosa")]) # setosa
y2 <- mean(iris$Sepal.Length[which(iris$Species=="versicolor")]) # versicolor
y3 <- mean(iris$Sepal.Length[which(iris$Species=="virginica")]) # virginica
#(c)
s1 <- sd(iris$Sepal.Length[which(iris$Species=="setosa")]) # setosa
s2 <- sd(iris$Sepal.Length[which(iris$Species=="versicolor")]) # versicolor
s3 <- sd(iris$Sepal.Length[which(iris$Species=="virginica")]) # virginica
#(d)
y.mean <- mean(iris$Sepal.Length) # grand mean
mean(iris$Sepal.Length) # grand mean
mean(iris$Sepal.Length[which(iris$Species=="setosa")]) # setosa
mean(iris$Sepal.Length[which(iris$Species=="versicolor")]) # versicolor
mean(iris$Sepal.Length[which(iris$Species=="virginica")]) # virginica
sd(iris$Sepal.Length[which(iris$Species=="setosa")]) # setosa
sd(iris$Sepal.Length[which(iris$Species=="versicolor")]) # versicolor
sd(iris$Sepal.Length[which(iris$Species=="virginica")]) # virginica
?pf
pf(119.264,2,147,lower.tail = F)
anova(lm(Sepal.Length~Species,data=iris))
anova(lm(Sepal.Length~Species,data=iris))$p.value
x <- anova(lm(Sepal.Length~Species,data=iris))
names(x)
anova(lm(Sepal.Length~Species,data=iris))$Pr(>F)
anova(lm(Sepal.Length~Species,data=iris))$"Pr(>F)"
anova(lm(Sepal.Width~Species,data=iris)) # sepal width
anova(lm(Petal.Length~Species,data=iris)) # petal length
anova(lm(Petal.Width~Species,data=iris)) # petal width
anova(lm(Sepal.Length~Species,data=iris))$"Pr(<F)"
anova(lm(Sepal.Length~Species,data=iris))$"Pr(>F)"
p.vals <- c(anova(lm(Sepal.Length~Species,data=iris))$"Pr(>F)",
anova(lm(Sepal.Width~Species,data=iris))$"Pr(>F)",
anova(lm(Petal.Length~Species,data=iris))$"Pr(>F)",
anova(lm(Petal.Width~Species,data=iris))$"Pr(>F)")
p.vals
anova(lm(Petal.Width~Species,data=iris))$"Pr(>F)"))
p.vals <- na.omit(c(anova(lm(Sepal.Length~Species,data=iris))$"Pr(>F)",
anova(lm(Sepal.Width~Species,data=iris))$"Pr(>F)",
anova(lm(Petal.Length~Species,data=iris))$"Pr(>F)",
anova(lm(Petal.Width~Species,data=iris))$"Pr(>F)"))
p.vals
p.vals[!is.na(p.vals)]
p.adjust(p.vals, "Bonferonni")
?p.adjust
p.adjust(p.vals, "bonferroni")
p.adjust(p.vals, "fdr")
mean(iris$Sepal.Length[which(iris$Species=="setosa")]) # setosa
mean(iris$Sepal.Length[which(iris$Species=="versicolor")]) # versicolor
mean(iris$Sepal.Length[which(iris$Species=="virginica")]) # virginica
sd(iris$Sepal.Length[which(iris$Species=="setosa")]) # setosa
sd(iris$Sepal.Length[which(iris$Species=="versicolor")]) # versicolor
sd(iris$Sepal.Length[which(iris$Species=="virginica")]) # virginica
pf(119.264,2,147,lower.tail = F) # the F distribution
anova(lm(Sepal.Length~Species,data=iris)) # sepal length
anova(lm(Sepal.Width~Species,data=iris)) # sepal width
anova(lm(Petal.Length~Species,data=iris)) # petal length
anova(lm(Petal.Width~Species,data=iris)) # petal width
sd(iris$Sepal.Length[which(iris$Species=="setosa")]) # setosa
sd(iris$Sepal.Length[which(iris$Species=="virginica")]) # virginica
sd(iris$Sepal.Length[which(iris$Species=="setosa")])^2
sd(iris$Sepal.Length[which(iris$Species=="virginica")])^2
f.stat <- v1/v2
v1 <- sd(iris$Sepal.Length[which(iris$Species=="setosa")])^2
v2 <- sd(iris$Sepal.Length[which(iris$Species=="virginica")])^2
f.stat <- v1/v2
?pf
pf(f.stat,49,49,lower.tail = F)
v1
v2
pf(f.stat,49,49)
?t.test
t.test(iris$Sepal.Length[which(iris$Species=="setosa"),iris$Sepal.Length[which(iris$Species=="versicolor"))
t.test(iris$Sepal.Length[which(iris$Species=="setosa")],iris$Sepal.Length[which(iris$Species=="versicolor")])
t.test(iris$Sepal.Length[which(iris$Species=="setosa")],iris$Sepal.Length[which(iris$Species=="versicolor")])
t.test(iris$Sepal.Length[which(iris$Species=="setosa")],iris$Sepal.Length[which(iris$Species=="virginica")])
t.test(iris$Sepal.Length[which(iris$Species=="virginica")],iris$Sepal.Length[which(iris$Species=="versicolor")])
t.test(iris$Sepal.Length[which(iris$Species=="setosa")],iris$Sepal.Length[which(iris$Species=="versicolor")])$p.value
,t.test(iris$Sepal.Length[which(iris$Species=="virginica")],iris$Sepal.Length[which(iris$Species=="versicolor")])$p.value)
p.vals <- c(t.test(iris$Sepal.Length[which(iris$Species=="setosa")],iris$Sepal.Length[which(iris$Species=="versicolor")])$p.value
,t.test(iris$Sepal.Length[which(iris$Species=="setosa")],iris$Sepal.Length[which(iris$Species=="virginica")])$p.value
,t.test(iris$Sepal.Length[which(iris$Species=="virginica")],iris$Sepal.Length[which(iris$Species=="versicolor")])$p.value)
p.vals
p.adjust(p.vals,"fdr")
v1 <- sd(iris$Sepal.Length[which(iris$Species=="setosa")])^2
v2 <- sd(iris$Sepal.Length[which(iris$Species=="virginica")])^2
f.stat <- v1/v2 # f statistics
pf(f.stat,49,49) # df = n-1
p.vals <- c(t.test(iris$Sepal.Length[which(iris$Species=="setosa")],iris$Sepal.Length[which(iris$Species=="versicolor")])$p.value
,t.test(iris$Sepal.Length[which(iris$Species=="setosa")],iris$Sepal.Length[which(iris$Species=="virginica")])$p.value
,t.test(iris$Sepal.Length[which(iris$Species=="virginica")],iris$Sepal.Length[which(iris$Species=="versicolor")])$p.value)
p.adjust(p.vals,"fdr")
?cor
cor(iris$Sepal.Length,iris$Sepal.Width)
pairs(iris[,1:4]) # only include continuous variables
cor(iris$Sepal.Length[which(iris$Species=="setosa")],iris$Sepal.Width[which(iris$Species=="setosa")])
cor(iris$Sepal.Length[which(iris$Species=="versicolor")],iris$Sepal.Width[which(iris$Species=="versicolor")])
cor(iris$Sepal.Length[which(iris$Species=="virginica")],iris$Sepal.Width[which(iris$Species=="virginica")])
>lm
?lm
lm(Sepal.length~Sepal.Width,data = iris)
lm(Sepal.Length~Sepal.Width,data = iris)
lm(Sepal.Length~Sepal.Width+Species,data = iris)
lm(Sepal.Length~Sepal.Width*Species,data = iris)
lm(Sepal.Length~Sepal.Width + difference,data = iris)
lm(Sepal.Length~Sepal.Width + Species,data = iris)
summary(fit3)
fit3 <- lm(Sepal.Length~Sepal.Width*Species,data = iris)
#(h)
summary(fit3)
summary(fit1)
fit1 <- lm(Sepal.Length~Sepal.Width,data = iris)
summary(fit1)
fit2 <- lm(Sepal.Length~Sepal.Width+Species,data = iris)
summary(fit2)
summary(fit3)
fit3 <- lm(Sepal.Length~Sepal.Width+Species,data = iris)
#(h)
summary(fit3)
predict(fit1)
fit3 <- lm(Sepal.Length~Sepal.Width*Species,data = iris)
summary(fit3)
residuals(fit1)
predict(fit1)
residuals(fit1) == iris$Sepal.Length - predict(fit1)
iris$Sepal.Length
predict(fit1)
predict(fit1)+residuals(fit1)
iris$Sepal.Length
residuals(fit1) == (iris$Sepal.Length - predict(fit1))
residuals(fit1)+ predict(fit1) == (iris$Sepal.Length)
residuals(fit1) - predict(fit1) == (iris$Sepal.Length)
predict(fit1)- residuals(fit1)== (iris$Sepal.Length)
predict(fit1)+ residuals(fit1)== (iris$Sepal.Length)
sum(predict(fit1)+ residuals(fit1)== (iris$Sepal.Length))
plot(predict(fit1),iris$Sepal.Length)
plot(predict(fit2),iris$Sepal.Length)
plot(predit(fit3),iris$Sepal.Length)
plot(predict(fit3),iris$Sepal.Length)
plot(predict(fit2),iris$Sepal.Length)
plot(predict(fit3),iris$Sepal.Length)
plot(predict(fit1),iris$Sepal.Length)
plot(predict(fit2),iris$Sepal.Length)
plot(predict(fit3),iris$Sepal.Length)
fit1 <- lm(Sepal.Length~Sepal.Width,data = iris)
plot(predict(fit1),iris$Sepal.Length)
cor(predict(fit1),iris$Sepal.Length)^2 # fit 1
cor(predict(fit2),iris$Sepal.Length)^2 # fit 2
cor(predict(fit3),iris$Sepal.Length)^2 # fit 3
summary(fit1)
summary(fit2)
cor(predict(fit1),iris$Sepal.Length)^2 # fit 1
anova(fit1,fit2)
anova(fit2,fit3)
anova(fit1,fit3)
summary(fit2)
cor(iris$Sepal.Length,iris$Sepal.Width)
cor(iris$Sepal.Length[which(iris$Species=="setosa")],iris$Sepal.Width[which(iris$Species=="setosa")])
cor(iris$Sepal.Length[which(iris$Species=="versicolor")],iris$Sepal.Width[which(iris$Species=="versicolor")])
cor(iris$Sepal.Length[which(iris$Species=="virginica")],iris$Sepal.Width[which(iris$Species=="virginica")])
fit1 <- lm(Sepal.Length~Sepal.Width,data = iris)
fit2 <- lm(Sepal.Length~Sepal.Width+Species,data = iris)
fit3 <- lm(Sepal.Length~Sepal.Width*Species,data = iris)
fit3
summary(fit3)
predict(fit1)+ residuals(fit1)== (iris$Sepal.Length)
1
1
plot(predict(fit1),iris$Sepal.Length) # fit 1
plot(predict(fit2),iris$Sepal.Length) # fit 2
cor(predict(fit3),iris$Sepal.Length)^2 # fit 3
plot(predict(fit3),iris$Sepal.Length) # fit 3
cor(predict(fit1),iris$Sepal.Length)^2 # fit 1
cor(predict(fit2),iris$Sepal.Length)^2 # fit 2
cor(predict(fit3),iris$Sepal.Length)^2 # fit 3
summary(fit1)
summary(fit2)
anova(fit1,fit2)
anova(fit1,fit3)
anova(fit2,fit3)
data(iris) # load data
fit1 <- lm(Sepal.Length~Sepal.Width,data = iris)
#(f)
fit2 <- lm(Sepal.Length~Sepal.Width+Species,data = iris)
#(g)
fit3 <- lm(Sepal.Length~Sepal.Width*Species,data = iris)
#(h)
summary(fit3)
iris$Sepal.Width[Sepal.Width > 3]
iris$Sepal.Width[iris$Sepal.Width > 3]
length(iris$Sepal.Width[iris$Sepal.Width>3])/length(iris$Sepal.Width)
p <- length(iris$Sepal.Width[iris$Sepal.Width>3])/length(iris$Sepal.Width)
p/(1+p)
p/(1-p)
odds <- p/(1-p)
odds/(1+odds)
pbinom(8,12,p)
pbinom(8,12,p,lower.tail = T)
pbinom(8,12,p,lower.tail = F)
pbinom(8,12,p,lower.tail = F) + dbinom(8,12,p)
dbinom(8,12,p)
table(iris$Species,iris$Sepal.Width>3)
pchisq(50.22,2,lower.tail = F)
chisq.test(iris$Sepal.Width>3~iris$Species)
chisq.test(iris$Sepal.Width>3,iris$Species)
WideSepalFit <- glm( (Sepal.Width>3)~Petal.Width+Species, family=binomial, data=iris)
Summary(WideSepalFit)
summary(WideSepalFit)
library(ggplot2)
qplot(Septal.Width,Petal.Width,data = iris)
qplot(Sepal.Width,Petal.Width,data = iris)
qplot(Sepal.Width,Petal.Width,col=Species,data = iris)
fit <-glm((Species == "Virginica")~Septal.Width+Petal.Width,data = iris)
fit <-glm((Species == "Virginica")~Sepal.Width+Petal.Width,data = iris)
summary(fit)
fit <-glm((Species == "virginica")~Sepal.Width+Petal.Width,data = iris)
summary(fit)
fit <-glm((Species == "virginica")~Sepal.Width*Petal.Width,data = iris)
summary(fit)
fit <-glm((Species == "virginica")~Sepal.Width+Petal.Width,data = iris)
summary(fit)
fit <-glm((Species == "virginica")~Sepal.Width+Petal.Width,,family = "binomial" ,data = iris)
summary(fit)
setwd("D:/research/hm_tree/final")
library(data.tree)
ptm <- proc.time()
cor.matrix <- function(df){
v <- colnames(df)
m <- matrix(0,length(v),length(v),dimnames = list(v,v))
sm <- matrix(0,length(v),length(v),dimnames = list(v,v))
om <- matrix(0,length(v),length(v),dimnames = list(v,v))
for (i in 1:ncol(m)){
for (j in 1:nrow(m)){
r <- cor(df[,v[i]], df[,v[j]], method="pearson")
sm[i,j] <- 1-r
om[i,j] <- r
if (r < 0){
m[i,j] <- 1e-5
}else{
m[i,j] <- r
}
}
}
list(m,sm,om)
}
choose.root.node <- function(ori.m){
p <- runif(1)
cumProb <- 0
sigmas <-apply(ori.m,1,function(x)sd(x))
inverse <- 1/sigmas
node_prob <- inverse/sum(inverse)
for (i in 1:length(node_prob)){
cumProb <- cumProb + node_prob[i]
if (p < cumProb){
return(names(node_prob[i]))
}
}
}
force.add.edge_ <- function(rv){
if (length(rv)==0){
p_vector <- 1
}else{
p_vector <- rv/sum(rv)
}
p <- runif(1)
cumProb <- 0
for (i in 1:length(p_vector)){
cumProb <- cumProb + p_vector[i]
if (p < cumProb){
return(names(p_vector[i]))
}
}
}
add.edge_ <- function(chosen,rv){
if (chosen != ""){
rv <- rv[which(names(rv)!=chosen)]
}
if (length(rv)==0){
p_vector <- 1
}else if (length(rv)==1){
p_vector <- rv/length(rv)
p_vector <- c(p_vector, 1-sum(p_vector))
}else{
p_vector <- rv/(max(rv)*length(rv))
p_vector <- c(p_vector, 1-sum(p_vector))
}
p <- runif(1)
cumProb <- 0
for (i in 1:length(p_vector)){
cumProb <- cumProb + p_vector[i]
if (p < cumProb){
return(names(p_vector[i]))
}
}
}
add.edge <- function(node,tree,used,cor.m,last.in.level){
rw <- cor.m[node,]
rv <- rw[!names(rw) %in% used]
chosen <- ""
if (last.in.level){
chosen <- force.add.edge_(rv)
result <- c(chosen,add.edge_(chosen,rv))
}
else{
chosen <- add.edge_(chosen,rv)
result <- c(chosen,add.edge_(chosen,rv))
}
result <- result[which(result!="")]
result <- sort(result)
n_used <- c(used,result)
if (length(result)!=0){
n_tree <- cbind(tree,matrix(0,nrow(tree),length(result)))
n_tree <- rbind(n_tree,matrix(0,length(result),ncol(n_tree)))
dimnames(n_tree) <- list(n_used,n_used)
n_tree[node,result] <- 1
}else{
n_tree <- tree
}
return(list(result,n_tree,n_used))
}
tree.gen <- function(cor.m,ori.m){
root <- choose.root.node(ori.m)
checked <- root
tree_m <- matrix(0,1,1,dimnames = list(checked,checked))
this_level <- list(root)
next_level<- list()
while(length(checked)<nrow(cor.m)){
while (length(this_level)!=0 && length(checked)<nrow(cor.m)){
# if no nodes are selected in this layer, force one on to the last node
if(length(this_level)==1 && length(next_level)==0){
last.in.level <- this_level[[1]] # last node in this layer
this_level <- this_level[-1] # dequeue first node
last.output <- add.edge(last.in.level,tree_m,checked,cor.m,TRUE)
children <- last.output[[1]]
next_level <- c(next_level,as.list(children)) #enqueue
tree_m <- last.output[[2]]
checked <- last.output[[3]]
}else{
parent <- this_level[[1]]
this_level <- this_level[-1] # dequeue
output <- add.edge(parent,tree_m,checked,cor.m,FALSE)
children <- output[[1]]
next_level <- c(next_level,as.list(children)) #enqueue
tree_m <- output[[2]]
checked <- output[[3]]
}
}
this_level <- sample(next_level) # randomize order to be checked
next_level <- list()
}
list(tree_m)
}
add.child <- function(node,matrix){ # recursive function
children <- colnames(matrix)[which(matrix[node$name,]==1)]
if (length(children)==0){
return(NULL)
}
for (i in 1:length(children)){
node$AddChild(children[i])
}
if (length(children)==2){
add.child(node$children[[1]],matrix)
add.child(node$children[[2]],matrix)
}else{
add.child(node$children[[1]],matrix)
}
}
matrix.to.tree <- function(matrix){
tree <- Node$new(rownames(matrix)[1])
add.child(tree,matrix)
tree
}
score <- function(tree.m,score.m){
k <- arrayInd(which(tree.m==1), dim(tree.m))
pairs <- apply(k,1,function(pair){
row <- rownames(tree.m)[pair[1]]
col <- colnames(tree.m)[pair[2]]
c(row,col)
})
sum(apply(pairs,2,function(pair){
score.m[pair[1],pair[2]]
}))
}
##########################################################
df <- read.table("5node_data.csv", header = TRUE,sep = ",")
matrices <- cor.matrix(df)
m <- matrices[[1]]
sm <- matrices[[2]]
om <- matrices[[3]]
tms <- replicate(5000,expr = tree.gen(m,om))
z <- unique(tms)
length(z)
dist <- sapply(z,function(unique_m){
n <- sapply(tms,function(m)identical(m,unique_m))
sum(n)
})
indexes <- sort(dist,TRUE,index.return=TRUE)$ix
times <- sort(dist,TRUE,index.return=TRUE)$x
t1 <- matrix.to.tree(z[[indexes[1]]])
plot(t1)
times[1]
t2 <- matrix.to.tree(z[[indexes[2]]])
plot(t2)
times[2]
t3 <- matrix.to.tree(z[[indexes[3]]])
plot(t3)
times[3]
index <- which(dist==max(dist))
for (i in index){
print(z[[i]])
print(dist[[i]])
}
matrix.to.tree(z[[index]])
scores <- sapply(tms,function(unique_m)score(unique_m,sm))
index2 <- which(scores==min(scores))
for (i in index2){
print(z[[i]])
print(dist[i])}
scores <- sapply(tms,function(unique_m)score(unique_m,sm))
scores <- sapply(z,function(unique_m)score(unique_m,sm))
v<- 35:70/20
hist(scores,breaks = v)
proc.time() - ptm
sm
v <- colnames(df)
sm <- matrix(0,length(v),length(v),dimnames = list(v,v))
for (i in 1:ncol(m)){
for (j in 1:nrow(m)){
r <- cor(df[,v[i]], df[,v[j]], method="pearson")
sm[i,j] <- round(1-r,2)
om[i,j] <- r
if (r < 0){
m[i,j] <- 1e-5
}else{
m[i,j] <- r
}
}
}
sm
