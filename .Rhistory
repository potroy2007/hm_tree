components <- strsplit(string,')')[[1]]
m <- matrix(0,length(components),length(components),dimnames = list(components,components))
for (i in length(components):1){
m[components[i],components[i-1]]=1
}
}
parse.newick(string)
m
parse.newick <- function(str){
string <- gsub("\\(|;",'',str,perl = T)
components <- strsplit(string,')')[[1]]
m <- matrix(0,length(components),length(components),dimnames = list(components,components))
for (i in length(components):1){
m[components[i],components[i-1]]=1
}
m
}
m
parse.newick()
parse.newick(string)
?apply
mode(components)
components
?lapply
lapply(components,function(x) strsplit(x,',')[[1]])
string <- "(((EryA)MEP)GMP,CMP)MPP;"
string <- gsub("\\(|;",'',string,perl = T)
components <- strsplit(string,')')[[1]]
lapply(components,function(x) strsplit(x,',')[[1]])
m <- matrix(0,length(components),length(components),dimnames = list(components,components))
for (i in length(components):1){
m[components[i],components[i-1]]=1
}
m
string <- "(((EryA)MEP)GMP,CMP)MPP;"
string <- gsub("\\(|;",'',string,perl = T)
components <- strsplit(string,')')[[1]]
components <- lapply(components,function(x) strsplit(x,',')[[1]])
m <- matrix(0,length(components),length(components),dimnames = list(components,components))
for (i in length(components):1){
m[components[i],components[i-1]]=1
}
m
string <- "(((EryA)MEP)GMP,CMP)MPP;"
string <- gsub("\\(|;",'',string,perl = T)
components <- strsplit(string,')')[[1]]
components <- lapply(components,function(x) strsplit(x,',')[[1]])
m <- matrix(0,length(components),length(components),dimnames = list(components,components))
for (i in length(components):1){
m[components[[i]],components[[i-1]]=1
}
m
string <- "(((EryA)MEP)GMP,CMP)MPP;"
string <- gsub("\\(|;",'',string,perl = T)
components <- strsplit(string,')')[[1]]
components <- lapply(components,function(x) strsplit(x,',')[[1]])
m <- matrix(0,length(components),length(components),dimnames = list(components,components))
for (i in length(components):1){
m[components[[i]],components[[i-1]]]=1
}
m
components[[3]][1]
components[[3]][2]
cell_types <- strsplit(string,')|,')
cell_types
string <- "(((EryA)MEP)GMP,CMP)MPP;"
string <- gsub("\\(|;",'',string,perl = T) # remove ( and ; from newick strings
cell_types <- strsplit(string,')|,')[[1]] # get cell types
m <- matrix(0,length(cell_types),length(cell_types),dimnames = list(cell_types,cell_types))
m
components
components[[3]]+1
components[[3]]+"ala"
string <- "(((EryA)MEP)CMP,GMP)MPP;"
string <- gsub("\\(|;",'',string,perl = T) # remove ( and ; from newick strings
cell_types <- strsplit(string,')|,')[[1]] # get cell types
m <- matrix(0,length(cell_types),length(cell_types),dimnames = list(cell_types,cell_types))
components <- strsplit(string,')')[[1]]
components <- lapply(components,function(x) strsplit(x,',')[[1]])
m[components[[3]]]
m
m[components[[3]][1]]
components[[3]]
components[[3]][1]
components[[3]][2]
m[components[[3]][1],]
m[components[[3]],]
m[components[[3]],components[[2]]]
string <- "(((EryA)MEP)CMP,GMP)MPP;"
string <- gsub("\\(|;",'',string,perl = T) # remove ( and ; from newick strings
cell_types <- strsplit(string,')|,')[[1]] # get cell types
m <- matrix(0,length(cell_types),length(cell_types),dimnames = list(cell_types,cell_types))
components <- strsplit(string,')')[[1]]
components <- lapply(components,function(x) strsplit(x,',')[[1]])
for (i in length(components):1){
if (length(components[[i]]>1){
m[components[[i]][1],components[[i-1]]] = 1
}
else {
m[components[[i]],components[[i-1]]]=1
}
}
m
string <- "(((EryA)MEP)CMP,GMP)MPP;"
string <- gsub("\\(|;",'',string,perl = T) # remove ( and ; from newick strings
cell_types <- strsplit(string,')|,')[[1]] # get cell types
m <- matrix(0,length(cell_types),length(cell_types),dimnames = list(cell_types,cell_types))
components <- strsplit(string,')')[[1]]
components <- lapply(components,function(x) strsplit(x,',')[[1]])
for (i in length(components):1){
if (length(components[[i]]>1){
m[components[[i]][1],components[[i-1]]] = 1
}
else {
m[components[[i]],components[[i-1]]]=1
}
}
m
string <- "(((EryA)MEP)CMP,GMP)MPP;"
string <- gsub("\\(|;",'',string,perl = T) # remove ( and ; from newick strings
cell_types <- strsplit(string,')|,')[[1]] # get cell types
m <- matrix(0,length(cell_types),length(cell_types),dimnames = list(cell_types,cell_types))
components <- strsplit(string,')')[[1]]
components <- lapply(components,function(x) strsplit(x,',')[[1]])
for (i in length(components):1){
if (length(components[[i]])>1){
m[components[[i]][1],components[[i-1]]]=1
}
else {
m[components[[i]],components[[i-1]]]=1
}
}
m
string <- "(((EryA)MEP)CMP,GMP)MPP;"
string <- gsub("\\(|;",'',string,perl = T) # remove ( and ; from newick strings
cell_types <- strsplit(string,')|,')[[1]] # get cell types
m <- matrix(0,length(cell_types),length(cell_types),dimnames = list(cell_types,cell_types))
components <- strsplit(string,')')[[1]]
components <- lapply(components,function(x) strsplit(x,',')[[1]])
for (i in length(components):2){
if (length(components[[i]])>1){
m[components[[i]][1],components[[i-1]]]=1
}
else {
m[components[[i]],components[[i-1]]]=1
}
}
m
string <- "(((EryA)MEP)CMP,GMP)MPP;"
string <- gsub("\\(|;",'',string,perl = T) # remove ( and ; from newick strings
cell_types <- strsplit(string,')|,')[[1]] # get cell types
m <- matrix(0,length(cell_types),length(cell_types),dimnames = list(cell_types,cell_types))
components <- strsplit(string,')')[[1]]
components <- lapply(components,function(x) strsplit(x,',')[[1]])
for (i in length(components):2){
if (length(components[[i]])>1){
m[components[[i]][1],components[[i-1]]]=1
}
else {
m[components[[i]],components[[i-1]]]=1
}
}
m
tree <- graph.adjacency(adj_matrix)
plot(tree)
library(igraph)
library(igraph)
string <- "(((EryA)MEP)CMP,GMP)MPP;"
string <- gsub("\\(|;",'',string,perl = T) # remove ( and ; from newick strings
cell_types <- strsplit(string,')|,')[[1]] # get cell types
m <- matrix(0,length(cell_types),length(cell_types),dimnames = list(cell_types,cell_types))
components <- strsplit(string,')')[[1]]
components <- lapply(components,function(x) strsplit(x,',')[[1]])
for (i in length(components):2){
if (length(components[[i]])>1){
m[components[[i]][1],components[[i-1]]]=1
}
else {
m[components[[i]],components[[i-1]]]=1
}
}
m
tree <- graph.adjacency(adj_matrix)
plot(tree)
library(igraph)
string <- "(((EryA)MEP)CMP,GMP)MPP;"
string <- gsub("\\(|;",'',string,perl = T) # remove ( and ; from newick strings
cell_types <- strsplit(string,')|,')[[1]] # get cell types
m <- matrix(0,length(cell_types),length(cell_types),dimnames = list(cell_types,cell_types))
components <- strsplit(string,')')[[1]]
components <- lapply(components,function(x) strsplit(x,',')[[1]])
for (i in length(components):2){
if (length(components[[i]])>1){
m[components[[i]][1],components[[i-1]]]=1
}
else {
m[components[[i]],components[[i-1]]]=1
}
}
m
tree <- graph.adjacency(m)
plot(tree)
library(igraph)
string <- "(((EryA)MEP)CMP,GMP)MPP;"
string <- gsub("\\(|;",'',string,perl = T) # remove ( and ; from newick strings
cell_types <- strsplit(string,')|,')[[1]] # get cell types
m <- matrix(0,length(cell_types),length(cell_types),dimnames = list(cell_types,cell_types))
components <- strsplit(string,')')[[1]]
components <- lapply(components,function(x) strsplit(x,',')[[1]])
for (i in length(components):2){
if (length(components[[i]])>1){
m[components[[i]][1],components[[i-1]]]=1
}
else {
m[components[[i]],components[[i-1]]]=1
}
}
m
tree <- graph.adjacency(m)
plot(tree)
library(igraph)
string <- "((F,G)C,(D,E)B)A;"
string <- gsub("\\(|;",'',string,perl = T) # remove ( and ; from newick strings
cell_types <- strsplit(string,')|,')[[1]] # get cell types
m <- matrix(0,length(cell_types),length(cell_types),dimnames = list(cell_types,cell_types))
components <- strsplit(string,')')[[1]]
components <- lapply(components,function(x) strsplit(x,',')[[1]])
for (i in length(components):2){
if (length(components[[i]])>1){
m[components[[i]][1],components[[i-1]]]=1
}
else {
m[components[[i]],components[[i-1]]]=1
}
}
m
tree <- graph.adjacency(m)
plot(tree)
library(igraph)
string <- "(((E)D},C)B)A;"
string <- gsub("\\(|;",'',string,perl = T) # remove ( and ; from newick strings
cell_types <- strsplit(string,')|,')[[1]] # get cell types
m <- matrix(0,length(cell_types),length(cell_types),dimnames = list(cell_types,cell_types))
components <- strsplit(string,')')[[1]]
components <- lapply(components,function(x) strsplit(x,',')[[1]])
for (i in length(components):2){
if (length(components[[i]])>1){
m[components[[i]][1],components[[i-1]]]=1
}
else {
m[components[[i]],components[[i-1]]]=1
}
}
m
tree <- graph.adjacency(m)
plot(tree)
library(igraph)
string <- "(((E)D,C)B)A;"
string <- gsub("\\(|;",'',string,perl = T) # remove ( and ; from newick strings
cell_types <- strsplit(string,')|,')[[1]] # get cell types
m <- matrix(0,length(cell_types),length(cell_types),dimnames = list(cell_types,cell_types))
components <- strsplit(string,')')[[1]]
components <- lapply(components,function(x) strsplit(x,',')[[1]])
for (i in length(components):2){
if (length(components[[i]])>1){
m[components[[i]][1],components[[i-1]]]=1
}
else {
m[components[[i]],components[[i-1]]]=1
}
}
m
tree <- graph.adjacency(m)
plot(tree)
parse.newick <- function(str){
string <- gsub("\\(|;",'',str,perl = T)
components <- strsplit(string,')')[[1]]
m <- matrix(0,length(components),length(components),dimnames = list(components,components))
for (i in length(components):1){
m[components[i],components[i-1]]=1
}
m
}
library(igraph)
string <- "(((E)D)C,B)A;"
string <- gsub("\\(|;",'',string,perl = T) # remove ( and ; from newick strings
cell_types <- strsplit(string,')|,')[[1]] # get cell types
m <- matrix(0,length(cell_types),length(cell_types),dimnames = list(cell_types,cell_types))
components <- strsplit(string,')')[[1]]
components <- lapply(components,function(x) strsplit(x,',')[[1]])
for (i in length(components):2){
if (length(components[[i]])>1){
m[components[[i]][1],components[[i-1]]]=1
}
else {
m[components[[i]],components[[i-1]]]=1
}
}
m
tree <- graph.adjacency(m)
plot(tree)
parse.newick <- function(str){
string <- gsub("\\(|;",'',str,perl = T)
components <- strsplit(string,')')[[1]]
m <- matrix(0,length(components),length(components),dimnames = list(components,components))
for (i in length(components):1){
m[components[i],components[i-1]]=1
}
m
}
library(igraph)
string <- "((E,D)C,B)A;"
string <- gsub("\\(|;",'',string,perl = T) # remove ( and ; from newick strings
cell_types <- strsplit(string,')|,')[[1]] # get cell types
m <- matrix(0,length(cell_types),length(cell_types),dimnames = list(cell_types,cell_types))
components <- strsplit(string,')')[[1]]
components <- lapply(components,function(x) strsplit(x,',')[[1]])
for (i in length(components):2){
if (length(components[[i]])>1){
m[components[[i]][1],components[[i-1]]]=1
}
else {
m[components[[i]],components[[i-1]]]=1
}
}
m
tree <- graph.adjacency(m)
plot(tree)
1- 2*pnorm(3.75,4,2/sqrt(100)) # 1- minus the two tails, 4-0.25=3.75
?pnorm
two_tail_t_test(testData)
two_tail_t_test <- function(x,mu=0){
x <- na.omit(x)
xbar <- abs(mean(x)) # added abs() here
n <- length(x)
sampSD <- sd(x)
tStatistic <- (xbar-mu)/(sampSD/sqrt(n))
p.value <- 2*pt(tStatistic, df=n-1, lower.tail = F)
return(p.value)
}
two_tail_t_test(testData)
testData <- c(-3,rep(-2,5),rep(-1,10),rep(0,10),rep(1,5),2)
two_tail_t_test(testData)
?t.test
t_stat
Strain1 <- c(42.6,57.89,45.22,45.4,40.01,48.64,48.42,46.86,49.47,52.14,46.11,43.53)
Strain2 <- c(46.2,54.12,52.48,46.97,65.89,57.41,59.07,51.07,56.24)
mean_diff <- mean(Strain1)-mean(Strain2) # means difference between 2 strains
mean_stderr <- sqrt(sd(Strain2)**2/length(Strain2)+sd(Strain1)**2/length(Strain1)) #mean stadard error of 2 strains
t_stat <- mean_diff/mean_stderr
t_stat
pt(2.020687,14,lower.tail = F) # one tail t-test
?pt
?SE
?stderr
2**2
3**2
?rt
n1 <- length(Strain1)
n2 <- length(Strain2)
SE_1 <- sd(Strain1)/sqrt(n1) #standard error of strain 1
SE_2 <- sd(Strain2)/sqrt(n2) #standard error of strain 2
df_paired <- (SE_2**2+SE_1**2)**2/((SE_2)**4/(n2-1)+(SE_1)**4/(n1-1))
Strain1 <- c(42.6,57.89,45.22,45.4,40.01,48.64,48.42,46.86,49.47,52.14,46.11,43.53)
Strain2 <- c(46.2,54.12,52.48,46.97,65.89,57.41,59.07,51.07,56.24)
mean_diff <- mean(Strain1)-mean(Strain2) # means difference between 2 strains
mean_stderr <- sqrt(sd(Strain2)**2/length(Strain2)+sd(Strain1)**2/length(Strain1)) #mean stadard error of 2 strains
t_stat <- mean_diff/mean_stderr
t_stat
#(b)
n1 <- length(Strain1)
n2 <- length(Strain2)
SE_1 <- sd(Strain1)/sqrt(n1) #standard error of strain 1
SE_2 <- sd(Strain2)/sqrt(n2) #standard error of strain 2
df_paired <- (SE_2**2+SE_1**2)**2/((SE_2)**4/(n2-1)+(SE_1)**4/(n1-1))
2*pt(t_stat,df_paired,lower.tail = T) # t test mu1 != mu2
Nsim <- 10^4
x <- runif(Nsim)
x1 = x[-Nsim]
x2 = x[-1]
hist(x)
plot(x1,x2)
acf(x)
U <- runif(Nsim)
X = -log(U)
Y = rexp(Nsim)
par(mfrow=c(1,2))
hist(X,freq = F,main="Exp from Uniform")
hastings=function(nsim=10^3){
#Hastings random walk algorithm#
a=c(.1,1,10);na=length(a)
x=array(0,c(na,nsim))
for (i in 1:na){
acc=0
for (j in 2:nsim){
y<-x[i,(j-1)]+runif(1,min=-a[i],max=a[i])
r=min(exp(-.5*((y^2)-(x[i,(j-1)]^2))),1)
u<-runif(1);acc=acc+(u<r)
x[i,j]<-y*(u<r)+x[i,(j-1)]*(u>r)
}
}
#---------------Plots-------------------------------
par(mfrow=c(3,na),mar=c(4,4,2,1))
for(i in 1:na) plot((nsim-500):nsim,x[i,(nsim-500):nsim],ty="l",lwd=2,xlab="Iterations",ylab="",
main=paste("Rate",(length(unique(x[i,]))/nsim),sep=" "))
for(i in 1:na){
hist(x[i,],freq=F,xlim=c(-4,4),ylim=c(0,.4),col='grey',ylab="",xlab="",breaks=35,main="")
curve(dnorm(x),lwd=2,add=T)
}
for(i in 1:na) acf(x[i,], main="")
}
hastings()
hastings()
hastings()
hastings()
hastings()
nsim <- 10^3
a=c(.1,1,10);na=length(a)
x=array(0,c(na,nsim))
x
for (i in 1:na){
acc=0
for (j in 2:nsim){
y<-x[i,(j-1)]+runif(1,min=-a[i],max=a[i])
r=min(exp(-.5*((y^2)-(x[i,(j-1)]^2))),1)
u<-runif(1);acc=acc+(u<r)
x[i,j]<-y*(u<r)+x[i,(j-1)]*(u>r)
}
}
x
m <- 0
s <- 1
set.seed(1)
samples <- rnorm(10000,m,s)
mean(samples)
summary(replicate(1000,mean(rnorm(10000,m,s))))
?seq_along
cummean <- function(x)
cumsum(x)/seq_along(x)
plot(cummean(samples), type='1',xlab="Sample",ylab = "cumulative mean",panel.first = abline(h=0, col="red"),las =1)
plot(cummean(samples), type='l',xlab="Sample",ylab = "cumulative mean",panel.first = abline(h=0, col="red"),las =1)
?cumsum
cumsum(x)
x <- c(1,2)
cumsum(x)
cumsum
cumsum(samples)
samples
length(samples)
setwd("D:/research/hm_tree")
library(igraph)
cell_types <- c("MPP","CMP","GMP","MEP","EryA")
edges <- c(0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0)
adj_matrix <- matrix(edges,length(cell_types),length(cell_types),byrow = T)
dimnames(adj_matrix) <- list(cell_types,cell_types)
tree <- graph.adjacency(adj_matrix)
make_matrix <- function(v, df){
m <- matrix(0,length(v),length(v))
dimnames(m) <- list(v,v)
for (i in 1:ncol(m)){
for (j in 1:nrow(m)){
m[i,j] <- round(1-cor(df[,v[i]], df[,v[j]], method="pearson"),digit = 2)
}
}
m
}
score <- function(tree){
total <- 0
z <- get.edgelist(tree)
for (i in 1:nrow(z)){
x <- z[i,1]
y <- z[i,2]
total <- total + m[x,y]
}
total
}
df <- read.table("5node_data.csv", header = TRUE,sep = ",")
v <- c("MPP","CMP","GMP","MEP","EryA")
m <- make_matrix(v, df)
s <- score(tree)
plot.igraph(tree)
library(igraph)
cell_types <- c("MPP","CMP","GMP","MEP","EryA")
edges <- c(0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0)
adj_matrix <- matrix(edges,length(cell_types),length(cell_types),byrow = T)
dimnames(adj_matrix) <- list(cell_types,cell_types)
tree <- graph.adjacency(adj_matrix)
make_matrix <- function(v, df){
m <- matrix(0,length(v),length(v))
dimnames(m) <- list(v,v)
for (i in 1:ncol(m)){
for (j in 1:nrow(m)){
m[i,j] <- round(1-cor(df[,v[i]], df[,v[j]], method="pearson"),digit = 2)
}
}
m
}
score <- function(tree){
total <- 0
z <- get.edgelist(tree)
for (i in 1:nrow(z)){
x <- z[i,1]
y <- z[i,2]
total <- total + m[x,y]
}
total
}
df <- read.table("5node_data.csv", header = TRUE,sep = ",")
v <- c("MPP","CMP","GMP","MEP","EryA")
m <- make_matrix(v, df)
s <- score(tree)
plot.igraph(tree)
