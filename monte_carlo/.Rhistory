result <- sort(result)
n_used <- c(used,result)
if (length(result)!=0){
n_tree <- cbind(tree,matrix(0,nrow(tree),length(result)))
n_tree <- rbind(n_tree,matrix(0,length(result),ncol(n_tree)))
dimnames(n_tree) <- list(n_used,n_used)
n_tree[node,result] <- 1
}else{
n_tree <- tree
}
print(n_used)
print(n_tree)
if (length(n_used)==nrow(cor.m)){
return(NULL)
}else if (length(result)==2){
add.edge(result[1],n_tree,n_used,cor.m)
if (length(n_used) < nrow(cor.m)){
add.edge(result[2],n_tree,n_used,cor.m)
}
}else if (length(result)==1){
add.edge(result,n_tree,n_used,cor.m)
}
}
add.edge(node,tree,used,m)
add.edge(node,tree,used,m)
add.edge(node,tree,used,m)
add.edge(node,tree,used,m)
add.edge(node,tree,used,m)
add.edge(node,tree,used,m)
add.edge(node,tree,used,m)
add.edge(node,tree,used,m)
add.edge(node,tree,used,m)
add.edge(node,tree,used,m)
add.edge(node,tree,used,m)
add.edge(node,tree,used,m)
add.edge(node,tree,used,m)
m
m['B','C:'E]
m['B','C':'E']
m['B','3:5]
m['B',3:5]
x <- m['B',3:5]
rv<-x
p_vector <- rv/(max(rv)*length(rv))
p_vector <- c(p_vector, 1-sum(p_vector))
p_vector
rv <- m["B",]
rv
rw <-m['b',]
rw <-m['B',]
used <- "B"
rv <- rw[!names(rw) %in% used]
rv
p_vector <- rv/(max(rv)*length(rv))
p_vector <- c(p_vector, 1-sum(p_vector))
p_vector
load("D:/docs/courses/DGP484/prac2data.RData") # load data
View(ALL.pheno)
View(ALL.expr)
gene.vals <- apply(ALL.expr,1,function(row)row["s01005"])
gene.vals
cell_types <- c("MPP","CMP","GMP","MEP","EryA")
edges <- c(0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0)
mx <- matrix(edges,length(cell_types),length(cell_types),byrow = T)
dimnames(mx) <- list(cell_types,cell_types)
mx
mx[1,]
names(mx[1,])
rownames(mx[1,0])
rownames(mx)[1]
fisher.test(jobSurvey$type,eduCats)
jobSurvey <- read.csv("D:/docs/courses/DGP484/prestige.txt",row.names=1)
fisher.test(jobSurvey$type,eduCats)
eduCats <- rep(NA,nrow(jobSurvey))
eduCats[jobSurvey$education<8.993333] <- "low"
eduCats[jobSurvey$education>=8.993333 & jobSurvey$education<=11.52333] <- "med"
eduCats[jobSurvey$education>=11.52333] <- "high"
table(eduCats)
fisher.test(jobSurvey$type,eduCats)
boxplot(jobSurvey$education~jobSurvey$type)
# let's add axis labels:
boxplot(jobSurvey$education~jobSurvey$type,
ylab="average education (yrs)",xlab="job type")
jobSurvey$type <- factor(jobSurvey$type, levels=c("bc","wc","prof")) # reorder job types
# education vs job type
boxplot(jobSurvey$education~jobSurvey$type,ylab="average education (yrs)",xlab="job type")
boxplot(jobSurvey$income~jobSurvey$type,ylab="average income",xlab="job type"
boxplot(jobSurvey$income~jobSurvey$type,ylab="average income",xlab="job type")
boxplot(jobSurvey$education~jobSurvey$maleDominated,ylab="average education (yrs)",xlab="male dominated")
boxplot(jobSurvey$income~jobSurvey$maleDominated,ylab="average income",xlab="male dominated")
boxplot(jobSurvey$education~jobSurvey$type,ylab="average education (yrs)",xlab="job type")
boxplot(jobSurvey$income~jobSurvey$type,ylab="average income",xlab="job type")
boxplot(jobSurvey$education~jobSurvey$maleDominated,ylab="average education (yrs)",xlab="male dominated")
boxplot(jobSurvey$income~jobSurvey$maleDominated,ylab="average income",xlab="male dominated")
install.packages("ggplot2")
library(ggplot2)
qplot(x=education, y=income, data=jobSurvey, colour=type, shape=maleDominated)
jobSurvey[which(jobSurvey$type==bc)]
jobSurvey[which(jobSurvey$type=="bc")]
jobSurvey[which(jobSurvey$type=="bc"),]
plot(jobSurvey$income~jobSurvey$education,col=jobSurvey$type,
pch=jobSurvey$maleDominated+1)
qplot(x=education, y=income, data=jobSurvey[which(jobSurvey$type=="bc"),], colour=maleDominated)
qplot(x=education, y=income, data=jobSurvey[which(jobSurvey$type=="wc"),], colour=maleDominated)
qplot(x=education, y=income, data=jobSurvey[which(jobSurvey$type=="prof"),], colour=maleDominated)
qplot(x=education, y=income, data=jobSurvey[which(jobSurvey$type=="wc"),], colour=maleDominated)
y
qplot(x=education, y=income, data=jobSurvey[which(jobSurvey$type=="wc"),], colour=maleDominated)
qplot(x=education, y=income, data=jobSurvey[which(jobSurvey$type=="prof"),], colour=maleDominated)
jobSurvey <- read.csv("D:/docs/courses/DGP484/prestige.txt",row.names=1)
qplot(x=education, y=income, data=jobSurvey[which(jobSurvey$type=="wc"),], colour=maleDominated)
library(ggplot2)
qplot(x=education, y=income, data=jobSurvey, colour=type, shape=maleDominated)
qplot(x=education, y=income, data=jobSurvey[which(jobSurvey$type=="wc"),], colour=maleDominated)
qplot(x=education, y=income, data=jobSurvey[which(jobSurvey$type=="wc"),], colour=maleDominated) # white collar
qplot(x=education, y=income, data=jobSurvey[which(jobSurvey$type=="prof"),], colour=maleDominated) # professional
min(jobSurvey$income)
max(jobSurvey$income)
min(jobSurvey$income) # minimum income
max(jobSurvey$income) # maximum income
qplot(x=education, y=income, data=jobSurvey[which(jobSurvey$type=="bc"),], colour=maleDominated, ylim = c(611,25879)) #blue collar
qplot(x=education, y=income, data=jobSurvey[which(jobSurvey$type=="wc"),], colour=maleDominated, ylim = c(611,25879)) # white collar
qplot(x=education, y=income, data=jobSurvey[which(jobSurvey$type=="prof"),], colour=maleDominated, ylim = c(611,25879)) # professional
qplot(x=education, y=income, data=jobSurvey[which(jobSurvey$type=="bc"),], colour=maleDominated, ylim = c(611,25879)) #blue collar
qplot(x=education, y=income, data=jobSurvey[which(jobSurvey$type=="wc"),], colour=maleDominated, ylim = c(611,25879)) # white collar
qplot(x=education, y=income, data=jobSurvey[which(jobSurvey$type=="prof"),], colour=maleDominated, ylim = c(611,25879)) # professional
pairs(jobSurvey)
pairs(jobSurvey)[1,3]
?cor
cor(jobSurvey$prestige,jobSurvey$education,method="pearson")
cor(jobSurvey$prestige,jobSurvey$education,method="pearson") # prestige vs education; pearson
cor(jobSurvey$prestige,jobSurvey$education,method="spearman") # prestige vs education; spearman
cor(jobSurvey$prestige,jobSurvey$income,method="pearson") # prestige vs income; pearson
cor(jobSurvey$prestige,jobSurvey$income,method="spearman") # prestige vs income; spearman
cor(jobSurvey$education,jobSurvey$income,method="pearson") # education vs income; pearson
cor(jobSurvey$education,jobSurvey$income,method="spearman") # education vs income; spearman
t.test(jobSurvey$income~jobSurvey$maleDominated)
?t.test
t.test(jobSurvey$income~jobSurvey$maleDominated,alternative = "greater")
t.test(jobSurvey$income~jobSurvey$maleDominated,alternative = "less")
# Mean difference is negative, so use alternative = "less"
t.test(jobSurvey$income~jobSurvey$maleDominated,alternative = "less")
jobSurvey[which(jobSurvey$type=="bc"),])$maleDominated
jobSurvey[which(jobSurvey$type=="bc"),]$maleDominated
t.test(jobSurvey$education~bc.maleDominated)
bc.maleDominated <- jobSurvey[which(jobSurvey$type=="bc"),]$maleDominated # subset maleDominated data for blue collar jobs
t.test(jobSurvey$education~bc.maleDominated)
bc <- jobSurvey[which(jobSurvey$type=="bc"),] # subset rows of blue collar jobs
bc
t.test(bc$education~bc$maleDominated)
bc <- jobSurvey[which(jobSurvey$type=="bc"),] # subset rows of blue collar jobs
t.test(bc$education~bc$maleDominated)
jobSurvey[!bc,]
!bc
bc
jobSurvey[!bc,]
other <- jobSurvey[!which(jobSurvey$type=="bc"),]
other
jobSurvey[!which(jobSurvey$type=="bc"),]
jobSurvey[which(jobSurvey$type!="bc"),]
is.bc <- which(jobSurvey$type =="bc") # rows of wc and prof jobs
is.bc <- jobSurvey$type =="bc" # rows of wc and prof jobs
is.bc
jobSurvey$type
t.test(jobSurvey$education~is.bc)
is.bc <- jobSurvey$type =="bc" # boolean vector of whether a job is blue collar
t.test(jobSurvey$education~is.bc)
t.test(jobSurvey$education~is.bc, mu=4)
t.test(jobSurvey$education~is.bc, mu=4) # set difference in mean to 4
qplot(x=prestige,y=education,data=jobSurvey)
qplot(x=prestige,y=education,data=jobSurvey)
qplot(x=education,y=prestige,data=jobSurvey)
b1 <- cor(jobSurvey$education,jobSurvey$prestige)*(sd(jobSurvey$prestige)/sd(jobSurvey$education))
b1
b0 <- mean(jobSurvey$prestige)-b1*mean(jobSurvey$education)
b0
t <- cor(jobSurvey$education,jobSurvey$prestige)*sqrt(nrow(jobSurvey)-2)/(1-cor(jobSurvey$education,jobSurvey$prestige))
t
t <- cor(jobSurvey$education,jobSurvey$prestige)*(sqrt(nrow(jobSurvey)-2)/(1-cor(jobSurvey$education,jobSurvey$prestige)))
t
pt(t,nrow(jobSurvey)-2)
pt(t,nrow(jobSurvey)-2,lower.tail = F)
nrow(jobSurvey)
fit <- lm(prestige ~ education, data=jobSurvey)
fit
summary(lm)
summary(fit)
t <- cor(jobSurvey$education,jobSurvey$prestige)*(sqrt(nrow(jobSurvey)-2)/(1-cor(jobSurvey$education,jobSurvey$prestige))**2)
t
pt(t,nrow(jobSurvey)-2,lower.tail = F)
b1 <- cor(jobSurvey$education,jobSurvey$prestige)*(sd(jobSurvey$prestige)/sd(jobSurvey$education)) # beta 1
b1
b0 <- mean(jobSurvey$prestige)-b1*mean(jobSurvey$education) # beta 0
b0
#(d)
t <- cor(jobSurvey$education,jobSurvey$prestige)*(sqrt(nrow(jobSurvey)-2)/(1-cor(jobSurvey$education,jobSurvey$prestige))**2)
t
t <- cor(jobSurvey$education,jobSurvey$prestige)*(sqrt(nrow(jobSurvey)-2/(1-cor(jobSurvey$education,jobSurvey$prestige)**2)))
t
t <- cor(jobSurvey$education,jobSurvey$prestige)
t
cor(jobSurvey$education,jobSurvey$prestige)
cor(jobSurvey$education,jobSurvey$prestige)**2
cor(jobSurvey$education,jobSurvey$prestige)^2
t <- cor(jobSurvey$education,jobSurvey$prestige)*100/sqrt(1-cor(jobSurvey$education,jobSurvey$prestige)^2)
t
t <- cor(jobSurvey$education,jobSurvey$prestige)*10/sqrt(1-cor(jobSurvey$education,jobSurvey$prestige)^2)
t
t <- cor(jobSurvey$education,jobSurvey$prestige)*sqrt((nrow(jobSurvey)-2)/(1-cor(jobSurvey$education,jobSurvey$prestige)^2)
t
t <- cor(jobSurvey$education,jobSurvey$prestige)*sqrt((nrow(jobSurvey)-2)/(1-cor(jobSurvey$education,jobSurvey$prestige)^2)))
t <- cor(jobSurvey$education,jobSurvey$prestige)*sqrt((nrow(jobSurvey)-2)/(1-cor(jobSurvey$education,jobSurvey$prestige)^2))))
t <- cor(jobSurvey$education,jobSurvey$prestige)*sqrt((nrow(jobSurvey)-2)/(1-cor(jobSurvey$education,jobSurvey$prestige)^2))
t
summary(fit)
residuals(fit)
?residuals
mean(residuals(fit))
hist(residuals(fit))
fit
plot(fit)
qplot(x=education,y=prestige,data=jobSurvey)
no.prof.fit <- lm(prestige ~ education,data=jobSurvey[which(jobSurvey$type!="prof"),])
summary(no.prof.fit)
# exclude professionals
no.prof.fit <- lm(prestige ~ education,data=jobSurvey[which(jobSurvey$type!="prof"),])
summary(no.prof.fit)
jobSurvey <- read.csv("D:/docs/courses/DGP484/prestige.txt",row.names=1)
jobSurvey$education<8.993333
jobSurvey$education<8.993333 == T
jobSurvey$education<8.993333
not.male.dominated <- rownames(jobSurvey[which(jobSurvey$maleDominated==F & jobSurvey$type=="prof"),])
# subset and extract the rownames that meet the two conditional statments
not.male.dominated
jobSurvey <- read.csv("D:/docs/courses/DGP484/prestige.txt",row.names=1)
not.male.dominated <- rownames(jobSurvey[which(jobSurvey$maleDominated==F & jobSurvey$type=="prof"),])
# subset and extract the rownames that meet the two conditional statments
not.male.dominated
pchisq(12.47,2,lower.tail = F) # df = (3-1)(2-1)= 2
table(jobSurvey[,"type"],jobSurvey[,"maleDominated"])
pchisq(10.51,2,lower.tail = F) # df = (3-1)(2-1)= 2
vals <- quantile(jobSurvey$education, probs = c(0.33,0.67))
vals[1] # 33% quantile
vals[2] # 67% quantile
eduCats <- rep(NA,nrow(jobSurvey))
eduCats[jobSurvey$education<8.9361] <- "low"
eduCats[jobSurvey$education>=8.9361 & jobSurvey$education<=11.557] <- "med"
eduCats[jobSurvey$education>=11.557] <- "high"
table(eduCats)
fisher.test(jobSurvey$type,eduCats,alternative = "greater")
jobSurvey[which(jobSurvey$type=="bc"),]
jobSurvey[jobSurvey$type=="bc",]
length(jobSurvey[jobSurvey$type=="bc",])
nrow(jobSurvey[jobSurvey$type=="bc",])
nrow(jobSurvey[which(jobSurvey$type=="bc"),])
t.test(jobSurvey$education~is.bc, mu=4, alternative = "greater") # set difference in mean to 4
not.male.dominated <- rownames(jobSurvey[which(jobSurvey$maleDominated==F & jobSurvey$type=="prof"),])
# subset and extract the rownames that meet the two conditional statments
not.male.dominated
table(jobSurvey[,"type"],jobSurvey[,"maleDominated"])
#Q4
#(c)
pchisq(10.51,2,lower.tail = F) # df = (3-1)(2-1)= 2
#(d)
chisq.test(jobSurvey$type,jobSurvey$maleDominated) # the two categories
#(e)
fisher.test(jobSurvey$type,jobSurvey$maleDominated) # the two categories
#Q5
# First, initialize a blank variable with NA's for each job:
eduAboveMean <- rep(NA,nrow(jobSurvey)) # what does nrow do? Look it up!
# Select the ones below the mean and assign them as "below"
eduAboveMean[jobSurvey$education<mean(jobSurvey$education)] <- "below"
# Select the ones above or equal to the mean and assign them as "above"
eduAboveMean[jobSurvey$education>=mean(jobSurvey$education)] <- "above"
#(a)
vals <- quantile(jobSurvey$education, probs = c(0.33,0.67))
vals[1] # 33% quantile
vals[2] # 67% quantile
#(b)
eduCats <- rep(NA,nrow(jobSurvey))
eduCats[jobSurvey$education<8.9361] <- "low"
eduCats[jobSurvey$education>=8.9361 & jobSurvey$education<=11.557] <- "med"
eduCats[jobSurvey$education>=11.557] <- "high"
table(eduCats)
#(c)
table(jobSurvey$type,eduCats)
#(e)
# We can do a fisher exact test instead
fisher.test(jobSurvey$type,eduCats,alternative = "greater")
#Q6
jobSurvey$type <- factor(jobSurvey$type, levels=c("bc","wc","prof")) # reorder job types
#(a)
boxplot(jobSurvey$education~jobSurvey$type,ylab="average education (yrs)",xlab="job type")
#(b)
boxplot(jobSurvey$income~jobSurvey$type,ylab="average income",xlab="job type")
#(c)
boxplot(jobSurvey$education~jobSurvey$maleDominated,ylab="average education (yrs)",xlab="male dominated")
#(d)
boxplot(jobSurvey$income~jobSurvey$maleDominated,ylab="average income",xlab="male dominated")
#Q7
library(ggplot2)
qplot(x=education, y=income, data=jobSurvey, colour=type, shape=maleDominated)
#(a)
jobSurvey[which(jobSurvey$type=="bc"),] # select rows with job type "bc"
#(b)
qplot(x=education, y=income, data=jobSurvey[which(jobSurvey$type=="bc"),], colour=maleDominated) #blue collar
#(c)
qplot(x=education, y=income, data=jobSurvey[which(jobSurvey$type=="wc"),], colour=maleDominated) # white collar
qplot(x=education, y=income, data=jobSurvey[which(jobSurvey$type=="prof"),], colour=maleDominated) # professional
#(d)
min(jobSurvey$income) # minimum income
max(jobSurvey$income) # maximum income
#(e)
qplot(x=education, y=income, data=jobSurvey[which(jobSurvey$type=="bc"),], colour=maleDominated, ylim = c(611,25879)) #blue collar
qplot(x=education, y=income, data=jobSurvey[which(jobSurvey$type=="wc"),], colour=maleDominated, ylim = c(611,25879)) # white collar
qplot(x=education, y=income, data=jobSurvey[which(jobSurvey$type=="prof"),], colour=maleDominated, ylim = c(611,25879)) # professional
#Q8
pairs(jobSurvey)
#(c)
cor(jobSurvey$prestige,jobSurvey$education,method="pearson") # prestige vs education; pearson
cor(jobSurvey$prestige,jobSurvey$education,method="spearman") # prestige vs education; spearman
cor(jobSurvey$prestige,jobSurvey$income,method="pearson") # prestige vs income; pearson
cor(jobSurvey$prestige,jobSurvey$income,method="spearman") # prestige vs income; spearman
cor(jobSurvey$education,jobSurvey$income,method="pearson") # education vs income; pearson
cor(jobSurvey$education,jobSurvey$income,method="spearman") # education vs income; spearman
#Q9
#(a)
# Mean difference is negative, so use alternative = "less"
t.test(jobSurvey$income~jobSurvey$maleDominated,alternative = "less")
#(b)
bc <- jobSurvey[which(jobSurvey$type=="bc"),] # subset rows of blue collar jobs
t.test(bc$education~bc$maleDominated)
#(c)
is.bc <- jobSurvey$type =="bc" # boolean vector of whether a job is blue collar
t.test(jobSurvey$education~is.bc)
#(d)
t.test(jobSurvey$education~is.bc, mu=4, alternative = "greater") # set difference in mean to 4
b1 <- cor(jobSurvey$education,jobSurvey$prestige)*(sd(jobSurvey$prestige)/sd(jobSurvey$education)) # beta 1
b1
b0 <- mean(jobSurvey$prestige)-b1*mean(jobSurvey$education) # beta 0
b0
#(d)
t <- cor(jobSurvey$education,jobSurvey$prestige)*sqrt((nrow(jobSurvey)-2)/(1-cor(jobSurvey$education,jobSurvey$prestige)^2))
t
#(e)
pt(t,nrow(jobSurvey)-2,lower.tail = F)
2*pt(t,nrow(jobSurvey)-2,lower.tail = F)
is.other <- jobSurvey$type == "wc"||jobSurvey$type == "prof"
jobSurvey <- read.csv("D:/docs/courses/DGP484/prestige.txt",row.names=1)
bc <- jobSurvey[which(jobSurvey$type=="bc"),] # subset rows of blue collar jobs
is.other <- jobSurvey$type == "wc"||jobSurvey$type == "prof"
is.other
is.other <- jobSurvey$type == "wc"|jobSurvey$type == "prof"
is.other
jobSurvey[which(is.bc),]
other <- jobSurvey[which(jobSurvey$type == "wc"|jobSurvey$type == "prof"),]
other
t.test(bc,other, mu=4, alternative = "greater") # set difference in mean to 4
bc <- jobSurvey[which(jobSurvey$type=="bc"),] # subset rows of blue collar jobs
bc
other
t.test(bc$education,other$education, mu=4, alternative = "greater") # set difference in mean to 4
other
bc
t.test(bc$education,other$education, mu=4, alternative = "less") # set difference in mean to 4
t <- cor(jobSurvey$education,jobSurvey$prestige)*sqrt((nrow(jobSurvey)-2)/(1-cor(jobSurvey$education,jobSurvey$prestige)^2))
t
cor(jobSurvey$education,jobSurvey$prestige)
fit <- lm(prestige ~ education, data=jobSurvey)
plot(fit)
?lm
plot(jobSurvey$prestige,jobSurvey$education)
summary(fit)
version
install.packages("GEOquery")
source("https://bioconductor.org/biocLite.R")
biocLite("GEOquery")
library(Biobase)
library(GEOquery)
gds6082 <- getGEO(filename='GDS6082_full.soft')
setwd("D:/docs/courses/DGP484/final_project")
gds6082 <- getGEO(filename='GDS6082_full.soft')
Meta(gds6082)$channel_count
Meta(gds6082)$discription
Meta(gds6082)$description
Table(gds6082)[1:10,1:6]
Table(gds6082)[10:20,1:6]
Table(gds6082)[1:20,1:6]
Table(gds6082)[20:30,1:6]
Table(gds6082)
Table(gds6082)[1:50,1:8]
df <- as.data.frame(Table(gds6082)[1:50,1:8])
View(df)
df <- as.data.frame(Table(gds6082))
View(df)
x <- getGEO(filename='GDS6082.soft')
df1 <- as.data.frame(Table(x))
View(df1)
View(df)
View(df1)
eset <- GDS2eSet(gds6082)
eset
eset <- GDS2eSet(gds6082,do.log2=TRUE)
gds6082 <- getGEO(filename='GDS6082_full.soft',AnnotGPL=TRUE)
eset <- GDS2eSet(gds6082)
gpl <- getGEO(filename = "GPL10558.annot",AnnotGPL=TRUE)
eset <- GDS2eSet(gds6082)
?GDS2eSet
gds6082 <- getGEO(GDS6082)
gds6082 <- getGEO("GDS6082")
eset <- GDS2eSet(gds6082)
eset
head(pData(eset))
pheno <- as.data.frame(pData(eset))
View(pheno)
View(pheno)
expr <- as.data.frame(exprs(sample.ExpressionSet))
expr <- as.data.frame(exprs(eset))
View(expr)
df <- as.data.frame(Table(gds6082))
View(df)
View(df)
expr<- as.data.frame(Table(gds6082)) # expression values
eset <- GDS2eSet(gds6082)
pheno <- as.data.frame(pData(eset)) # phenotype data
View(pheno)
View(pheno)
View(expr)
na.omit(expr)
expr <- na.omit(expr)
View(expr)
expr[1,]
setwd("D:/research/hm_tree/monte_carlo")
t.test(expr["PLAC8",pheno$dose=="150 HA u/mL (MOI of 0.02)"],expr["PLAC8",pheno$dose=="control"])
expr["PLAC8",pheno$dose=="150 HA u/mL (MOI of 0.02)"]
expr["PLAC8",pheno$dose=="control"]
library(Biobase)
library(GEOquery)
gds6082 <- getGEO("GDS6082")
expr<- as.data.frame(Table(gds6082)) # expression values
expr <- na.omit(expr)
eset <- GDS2eSet(gds6082)
pheno <- as.data.frame(pData(eset)) # phenotype data
t.test(expr["PLAC8",pheno$dose=="150 HA u/mL (MOI of 0.02)"],expr["PLAC8",pheno$dose=="control"])
expr["PLAC8",pheno$dose=="150 HA u/mL (MOI of 0.02)"]
View(expr)
expr[expr$IDENTIFIER == "PLAC8",pheno$dose=="150 HA u/mL (MOI of 0.02)"]
expr[expr$IDENTIFIER == "PLAC8",pheno$dose=="control"]
t.test(expr[expr$IDENTIFIER == "PLAC8",pheno$dose=="150 HA u/mL (MOI of 0.02)"],expr[expr$IDENTIFIER == "PLAC8",pheno$dose=="control"])
expr[expr$IDENTIFIER == "PLAC8",pheno$dose=="control"]
expr[expr$IDENTIFIER == "GADPH",pheno$dose=="control"]
expr[expr$IDENTIFIER == "GAPDH",pheno$dose=="control"]
expr[expr$ID_REF == "ILMN_1343291",pheno$dose=="control"]
expr[expr$ID_REF == "ILMN_1343291",pheno$dose=="150 HA u/mL (MOI of 0.02)"]
load("D:/docs/courses/DGP484/prac2data.RData")
View(ALL.expr)
gds6082 <- getGEO("GDS5432")
expr<- as.data.frame(Table(gds5432)) # expression values
expr <- na.omit(expr)
eset <- GDS2eSet(gds5432)
pheno <- as.data.frame(pData(eset)) # phenotype data
View(expr)
gds5432 <- getGEO("GDS5432")
expr<- as.data.frame(Table(gds5432)) # expression values
expr <- na.omit(expr)
eset <- GDS2eSet(gds5432)
pheno <- as.data.frame(pData(eset)) # phenotype data
View(expr)
View(pheno)
expr<- as.data.frame(Table(gds5432)) # expression values
expr <- na.omit(expr)
?GDS2eSet
gds5286 <- getGEO("GDS5286")
expr<- as.data.frame(Table(gds5286)) # expression values
expr <- na.omit(expr)
eset <- GDS2eSet(gds5286,do.log2 = TRUE)
pheno <- as.data.frame(pData(eset)) # phenotype data
View(expr)
expr<- as.data.frame(Table(gds5286)) # expression values
expr <- na.omit(expr)
eset
expr <- as.data.frame(experimentData(eset))
expr <- as.data.frame(expr(eset))
expr <- as.data.frame(exprs(eset))
View(expr)
View(pheno)
expr<- as.data.frame(Table(gds5286)) # expression values
View(expr)
expr2 <- as.data.frame(exprs(eset))
View(expr2)
x <- expr$IDENTIFIER
length(unique(x))
annotation(eset)
pData(eset)
gds4214 <- getGEO("GDS4214")
expr<- as.data.frame(Table(gds4214)) # expression values
expr <- na.omit(expr)
eset <- GDS2eSet(gds4214,do.log2 = TRUE)
pheno <- as.data.frame(pData(eset)) # phenotype data
View(expr)
View(pheno)
View(expr)
gds4214 <- getGEO("GDS1726")
expr<- as.data.frame(Table(gds4214)) # expression values
expr <- na.omit(expr)
eset <- GDS2eSet(gds4214,do.log2 = TRUE)
pheno <- as.data.frame(pData(eset)) # phenotype data
View(expr)
expr2 <- as.data.frame(exprs(eset))
View(expr2)
View(pheno)
View(expr)
